import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    console.log('üì• Webhook –æ—Ç –Æ–ö–∞—Å—Å—ã:', body)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if (body.event !== 'payment.succeeded' && body.event !== 'payment.canceled') {
      return NextResponse.json({ success: true })
    }

    const payment = body.object
    const paymentId = payment.id
    const status = payment.status
    const metadata = payment.metadata

    if (!metadata?.orderId) {
      console.error('‚ùå orderId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ metadata –ø–ª–∞—Ç–µ–∂–∞')
      return NextResponse.json({ error: 'orderId not found' }, { status: 400 })
    }

    const orderId = metadata.orderId

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –∑–∞–∫–∞–∑–µ
    const paymentStatus = 
      status === 'succeeded' ? 'SUCCEEDED' :
      status === 'canceled' ? 'CANCELED' :
      status === 'waiting_for_capture' ? 'WAITING_FOR_CAPTURE' :
      'PENDING'

    await prisma.order.update({
      where: { id: orderId },
      data: {
        paymentStatus,
        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
        ...(status === 'succeeded' && {
          status: 'CONFIRMED'
        })
      }
    })

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId}: ${paymentStatus}`)

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

